#!/usr/bin/env bash

# ████████╗ █████╗  ██████╗ ███╗   ███╗ █████╗ ███╗   ██╗
# ╚══██╔══╝██╔══██╗██╔════╝ ████╗ ████║██╔══██╗████╗  ██║
#    ██║   ███████║██║  ███╗██╔████╔██║███████║██╔██╗ ██║
#    ██║   ██╔══██║██║   ██║██║╚██╔╝██║██╔══██║██║╚██╗██║
#    ██║   ██║  ██║╚██████╔╝██║ ╚═╝ ██║██║  ██║██║ ╚████║
#    ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝


GREEN=$'\e[1;32m'
RED=$'\e[1;31m'
YELLOW=$'\e[1;33m'
BLUE=$'\e[1;34m'
END=$'\e[0m'

show_help(){
    echo "Usage: tagman <target_tag> [--dry|-d][--origin|-o]"
    echo ""
    echo ""
    echo "Options:"
    echo "  -d, --dry                  just show what would be deleted"
    echo "  -r, --remote               perform deletion on remote as well"
}

# first argument: accent type
# second argument: text
colorize(){
    case $1 in
        warning)
            ACCENT=$YELLOW
            ;;
        error)
            ACCENT=$RED
            ;;
        success)
            ACCENT=$GREEN
            ;;
        *)
            ACCENT=$BLUE
            ;;
    esac
    echo "$ACCENT$2$END"
}


[ $# -eq 0 ] && show_help && exit 0
TARGET_TAG=$1
shift

# parse arguments
DRY=0
REMOTE=0
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -d|--dry)
            DRY=1
            colorize warning "Dry run enabled!"
            ;;
        -r|--remote)
            REMOTE=1
            colorize warning "Remote change enabled!"
            ;;
    esac
    shift
done

# modes separator
[ $DRY -eq 1 ] || [ $REMOTE -eq 1 ] \
    && echo "===================="

all_tags=$(git tag)

# remove prefixes/suffixes, sort alphabetically (added line number to later retrieve line)
tags=$(echo "$all_tags" | sed 's/^[^0-9]*// ; s/[^0-9]*$//' | awk '{print $0 "$" NR}' | sort)
cleaned_tags=$(echo "$tags" | sed 's/\$[0-9]*$//')


# check if given tag actually exists
[ $(echo "$cleaned_tags" | grep -x $TARGET_TAG | wc -l) -eq 0 ] \
    && colorize error "tag does not exist!" \
    && colorize warning "Available tags:" \
    && echo "$cleaned_tags" | uniq \
    && exit 1

# perform deletion (or just printing on dry run)
while read tag; do
    cleaned_tag=$(echo $tag | sed 's/\$[0-9]*$//')
    line_num=$(echo $tag | sed 's/.*\$\([0-9]*\)$/\1/')
    # echo $cleaned_tag "=>" $line_num
    [[ $cleaned_tag == $TARGET_TAG ]] \
        && echo "====================" \
        && colorize success "Finished!" \
        && exit 0

    # get original tag name (without prefix/suffix removal)
    full_tag_name=$(echo "$all_tags" | sed -n "${line_num}p")

    # first deal with dry runs
    [ $DRY -eq 1 ] && [ $REMOTE -eq 1 ] && echo "DELETE (remote): $full_tag_name"
    [ $DRY -eq 1 ] && echo "DELETE: $full_tag_name" && continue

    # optionally delete remote tag
    if [ $REMOTE -eq 1 ]; then
        git push --delete origin $full_tag_name \
            || continue # this handles failed authentication to not remove local as well
    fi
    # deletion locally
    git tag -d $full_tag_name

done <<< $tags
